{"ast":null,"code":"import { usersAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = \"SET_USER_DATA\";\nconst initialState = {\n  userId: null,\n  login: null,\n  email: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setUserDataActionCreator = (userId, login, email, isAuth) => {\n  return {\n    type: SET_USER_DATA,\n    payload: {\n      userId,\n      login,\n      email,\n      isAuth\n    }\n  };\n};\nexport const authoriseMeThunkCreator = () => {\n  return async dispatch => {\n    let response = await usersAPI.authoriseMe();\n\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        login,\n        email\n      } = response.data.data;\n      dispatch(setUserDataActionCreator(id, login, email, true));\n    }\n  };\n};\nexport const loginThunkCreator = (email, password, rememberMe) => {\n  return dispatch => {\n    usersAPI.login(email, password, rememberMe).then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(authoriseMeThunkCreator());\n      } else {\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n        dispatch(stopSubmit(\"login\", {\n          _error: message\n        }));\n      }\n    });\n  };\n};\nexport const logoutThunkCreator = () => {\n  return dispatch => {\n    usersAPI.logout().then(response => {\n      if (response.data.resultCode === 0) {\n        dispatch(setUserDataActionCreator(null, null, null, false));\n      }\n    });\n  };\n};\nexport default authReducer;","map":{"version":3,"sources":["E:/react_projects/it-kamasutra/src/redux/authReducer.js"],"names":["usersAPI","stopSubmit","SET_USER_DATA","initialState","userId","login","email","isAuth","authReducer","state","action","type","payload","setUserDataActionCreator","authoriseMeThunkCreator","dispatch","response","authoriseMe","data","resultCode","id","loginThunkCreator","password","rememberMe","then","message","messages","length","_error","logoutThunkCreator","logout"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,YAAvB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,IADS;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,KAAK,EAAE,IAHU;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAArB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAIJ;AACI,aAAOH,KAAP;AAPR;AASH,CAVD;;AAYA,OAAO,MAAMI,wBAAwB,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,KAAkC;AACtE,SAAM;AACFI,IAAAA,IAAI,EAAET,aADJ;AAEFU,IAAAA,OAAO,EAAE;AACLR,MAAAA,MADK;AACEC,MAAAA,KADF;AACQC,MAAAA,KADR;AACeC,MAAAA;AADf;AAFP,GAAN;AAMH,CAPM;AASP,OAAO,MAAMO,uBAAuB,GAAG,MAAM;AACzC,SAAO,MAAOC,QAAP,IAAoB;AACvB,QAAIC,QAAQ,GAAG,MAAMhB,QAAQ,CAACiB,WAAT,EAArB;;AACI,QAAGD,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAhC,EAAmC;AAC/B,UAAI;AAACC,QAAAA,EAAD;AAAKf,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAqBU,QAAQ,CAACE,IAAT,CAAcA,IAAvC;AACAH,MAAAA,QAAQ,CAACF,wBAAwB,CAACO,EAAD,EAAIf,KAAJ,EAAUC,KAAV,EAAgB,IAAhB,CAAzB,CAAR;AACH;AACR,GAND;AAOH,CARM;AAUP,OAAO,MAAMe,iBAAiB,GAAG,CAACf,KAAD,EAAOgB,QAAP,EAAiBC,UAAjB,KAAgC;AAC7D,SAAQR,QAAD,IAAc;AACjBf,IAAAA,QAAQ,CAACK,KAAT,CAAeC,KAAf,EAAqBgB,QAArB,EAA8BC,UAA9B,EAA0CC,IAA1C,CAA+CR,QAAQ,IAAI;AACvD,UAAGA,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAhC,EAAmC;AAC/BJ,QAAAA,QAAQ,CAACD,uBAAuB,EAAxB,CAAR;AACH,OAFD,MAEK;AACD,YAAIW,OAAO,GAAGT,QAAQ,CAACE,IAAT,CAAcQ,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCX,QAAQ,CAACE,IAAT,CAAcQ,QAAd,CAAuB,CAAvB,CAApC,GAAgE,YAA9E;AACAX,QAAAA,QAAQ,CAACd,UAAU,CAAC,OAAD,EAAU;AAAC2B,UAAAA,MAAM,EAAEH;AAAT,SAAV,CAAX,CAAR;AACH;AACJ,KAPD;AAQH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMI,kBAAkB,GAAG,MAAM;AACpC,SAAQd,QAAD,IAAc;AACjBf,IAAAA,QAAQ,CAAC8B,MAAT,GAAkBN,IAAlB,CAAuBR,QAAQ,IAAI;AAC/B,UAAIA,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAmC;AAC/BJ,QAAAA,QAAQ,CAACF,wBAAwB,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,KAAhB,CAAzB,CAAR;AACH;AACJ,KAJD;AAKH,GAND;AAOH,CARM;AAUP,eAAeL,WAAf","sourcesContent":["import {usersAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = \"SET_USER_DATA\";\r\n\r\nconst initialState = {\r\n    userId: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setUserDataActionCreator = (userId, login, email, isAuth) => {\r\n    return{\r\n        type: SET_USER_DATA,\r\n        payload: {\r\n            userId,login,email, isAuth\r\n        }\r\n    }\r\n}\r\n\r\nexport const authoriseMeThunkCreator = () => {\r\n    return async (dispatch) => {\r\n        let response = await usersAPI.authoriseMe()\r\n            if(response.data.resultCode === 0) {\r\n                let {id, login, email} = response.data.data;\r\n                dispatch(setUserDataActionCreator(id,login,email,true));\r\n            }\r\n    }\r\n}\r\n\r\nexport const loginThunkCreator = (email,password, rememberMe) => {\r\n    return (dispatch) => {\r\n        usersAPI.login(email,password,rememberMe).then(response => {\r\n            if(response.data.resultCode === 0) {\r\n                dispatch(authoriseMeThunkCreator())\r\n            }else{\r\n                let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n                dispatch(stopSubmit(\"login\", {_error: message}));\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const logoutThunkCreator = () => {\r\n    return (dispatch) => {\r\n        usersAPI.logout().then(response => {\r\n            if (response.data.resultCode === 0){\r\n                dispatch(setUserDataActionCreator(null,null,null,false))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}