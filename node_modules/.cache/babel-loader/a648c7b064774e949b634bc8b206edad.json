{"ast":null,"code":"import { usersAPI } from \"../api/api\";\nconst SET_USER_DATA = \"SET_USER_DATA\";\nconst initialState = {\n  userId: null,\n  login: null,\n  email: null,\n  isAuth: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.data,\n        isAuth: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setUserDataActionCreator = (userId, login, email) => {\n  return {\n    type: SET_USER_DATA,\n    data: {\n      userId,\n      login,\n      email\n    }\n  };\n};\nexport const authoriseMeThunkCreator = () => {\n  return dispatch => {\n    usersAPI.authoriseMe().then(data => {\n      if (data.resultCode === 0) {\n        let {\n          id,\n          login,\n          email\n        } = data.data;\n        dispatch(setUserDataActionCreator(id, login, email));\n      }\n    });\n  };\n};\nexport const loginThunkCreator = (email, password, rememberMe) => {\n  return dispatch => {\n    usersAPI.login(email, password, rememberMe).then(data => {\n      if (data.resultCode === 0) {\n        dispatch(authoriseMeThunkCreator());\n      }\n    });\n  };\n};\nexport default authReducer;","map":{"version":3,"sources":["E:/react_projects/it-kamasutra/src/redux/authReducer.js"],"names":["usersAPI","SET_USER_DATA","initialState","userId","login","email","isAuth","authReducer","state","action","type","data","setUserDataActionCreator","authoriseMeThunkCreator","dispatch","authoriseMe","then","resultCode","id","loginThunkCreator","password","rememberMe"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,YAAvB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,IADS;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,KAAK,EAAE,IAHU;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAArB;;AAOA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE,IAFP;AAGHL,QAAAA,MAAM,EAAE;AAHL,OAAP;;AAKJ;AACI,aAAOE,KAAP;AARR;AAUH,CAXD;;AAaA,OAAO,MAAMI,wBAAwB,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,KAA0B;AAC9D,SAAM;AACFK,IAAAA,IAAI,EAAET,aADJ;AAEFU,IAAAA,IAAI,EAAE;AACFR,MAAAA,MADE;AACKC,MAAAA,KADL;AACWC,MAAAA;AADX;AAFJ,GAAN;AAMH,CAPM;AASP,OAAO,MAAMQ,uBAAuB,GAAG,MAAM;AACzC,SAAQC,QAAD,IAAc;AACjBd,IAAAA,QAAQ,CAACe,WAAT,GAAuBC,IAAvB,CAA4BL,IAAI,IAAI;AAChC,UAAGA,IAAI,CAACM,UAAL,KAAoB,CAAvB,EAA0B;AACtB,YAAI;AAACC,UAAAA,EAAD;AAAKd,UAAAA,KAAL;AAAYC,UAAAA;AAAZ,YAAqBM,IAAI,CAACA,IAA9B;AACAG,QAAAA,QAAQ,CAACF,wBAAwB,CAACM,EAAD,EAAId,KAAJ,EAAUC,KAAV,CAAzB,CAAR;AACH;AACJ,KALD;AAMH,GAPD;AAQH,CATM;AAWP,OAAO,MAAMc,iBAAiB,GAAG,CAACd,KAAD,EAAOe,QAAP,EAAiBC,UAAjB,KAAgC;AAC7D,SAAQP,QAAD,IAAc;AACjBd,IAAAA,QAAQ,CAACI,KAAT,CAAeC,KAAf,EAAqBe,QAArB,EAA8BC,UAA9B,EAA0CL,IAA1C,CAA+CL,IAAI,IAAI;AACnD,UAAGA,IAAI,CAACM,UAAL,KAAoB,CAAvB,EAA0B;AACtBH,QAAAA,QAAQ,CAACD,uBAAuB,EAAxB,CAAR;AACH;AACJ,KAJD;AAKH,GAND;AAOH,CARM;AAUP,eAAeN,WAAf","sourcesContent":["import {usersAPI} from \"../api/api\";\r\n\r\nconst SET_USER_DATA = \"SET_USER_DATA\";\r\n\r\nconst initialState = {\r\n    userId: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                isAuth: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setUserDataActionCreator = (userId, login, email) => {\r\n    return{\r\n        type: SET_USER_DATA,\r\n        data: {\r\n            userId,login,email\r\n        }\r\n    }\r\n}\r\n\r\nexport const authoriseMeThunkCreator = () => {\r\n    return (dispatch) => {\r\n        usersAPI.authoriseMe().then(data => {\r\n            if(data.resultCode === 0) {\r\n                let {id, login, email} = data.data;\r\n                dispatch(setUserDataActionCreator(id,login,email));\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const loginThunkCreator = (email,password, rememberMe) => {\r\n    return (dispatch) => {\r\n        usersAPI.login(email,password,rememberMe).then(data => {\r\n            if(data.resultCode === 0) {\r\n                dispatch(authoriseMeThunkCreator());\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}