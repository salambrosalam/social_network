{"ast":null,"code":"import React from \"react\";\nlet store = {\n  rerenderEntireTree: () => {\n    console.log(\"state is changed\");\n  },\n  _state: {\n    profilePage: {\n      posts: [{\n        id: 1,\n        message: \"Hi,from Java man\",\n        likesCount: 25\n      }, {\n        id: 1,\n        message: \"Python the best_ ho-ho-ho\",\n        likesCount: 55\n      }],\n      newPostText: \"\"\n    },\n    messagesPage: {\n      dialogs: [{\n        id: 1,\n        name: \"Roman\"\n      }, {\n        id: 2,\n        name: \"Daniel\"\n      }, {\n        id: 3,\n        name: \"Max\"\n      }],\n      messages: [{\n        id: 1,\n        message: \"Hi\"\n      }, {\n        id: 2,\n        message: \"When will u connect Mongo Homie???)))\"\n      }, {\n        id: 3,\n        message: \"AHAHAHAHhHH\"\n      }]\n    },\n    sidebar: {\n      friends: [{\n        id: 1,\n        name: \"Max\"\n      }, {\n        id: 2,\n        name: \"Daniel\"\n      }]\n    }\n  },\n  getState: () => {\n    return store.state;\n  },\n  addPost: postMessage => {\n    let newPost = {\n      id: 5,\n      message: this.getState().profilePage.newPostText,\n      likesCount: 100\n    };\n    this.getState().profilePage.posts.push(newPost);\n    this.getState().profilePage.newPostText = \"\";\n    this.rerenderEntireTree(this.getState());\n  },\n  updateNewPostText: newText => {\n    this.getState().profilePage.newPostText = newText;\n    this.rerenderEntireTree(this.getState());\n  },\n  subscribe: observer => {\n    debugger;\n    this.rerenderEntireTree = observer; // observer - наблюдатель (pattern)\n    //examples: addEventListener, onClick\n  }\n};\nexport default store;","map":{"version":3,"sources":["C:/react_projects/it-kamasutra/src/redux/state.js"],"names":["React","store","rerenderEntireTree","console","log","_state","profilePage","posts","id","message","likesCount","newPostText","messagesPage","dialogs","name","messages","sidebar","friends","getState","state","addPost","postMessage","newPost","push","updateNewPostText","newText","subscribe","observer"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAIC,KAAK,GAAG;AAEPC,EAAAA,kBAAkB,EAAE,MAAK;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACH,GAJO;AAKRC,EAAAA,MAAM,EAAE;AACJC,IAAAA,WAAW,EAAE;AACTC,MAAAA,KAAK,EAAE,CACH;AAACC,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE,kBAAjB;AAAqCC,QAAAA,UAAU,EAAE;AAAjD,OADG,EAEH;AAACF,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE,2BAAjB;AAA8CC,QAAAA,UAAU,EAAE;AAA1D,OAFG,CADE;AAKTC,MAAAA,WAAW,EAAE;AALJ,KADT;AAQJC,IAAAA,YAAY,EAAE;AACVC,MAAAA,OAAO,EAAE,CACL;AAACL,QAAAA,EAAE,EAAE,CAAL;AAAQM,QAAAA,IAAI,EAAE;AAAd,OADK,EAEL;AAACN,QAAAA,EAAE,EAAE,CAAL;AAAQM,QAAAA,IAAI,EAAE;AAAd,OAFK,EAGL;AAACN,QAAAA,EAAE,EAAE,CAAL;AAAQM,QAAAA,IAAI,EAAE;AAAd,OAHK,CADC;AAKVC,MAAAA,QAAQ,EAAE,CACN;AAACP,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE;AAAjB,OADM,EAEN;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE;AAAjB,OAFM,EAGN;AAACD,QAAAA,EAAE,EAAE,CAAL;AAAQC,QAAAA,OAAO,EAAE;AAAjB,OAHM;AALA,KARV;AAkBJO,IAAAA,OAAO,EAAE;AACLC,MAAAA,OAAO,EAAE,CACL;AAACT,QAAAA,EAAE,EAAE,CAAL;AAAQM,QAAAA,IAAI,EAAE;AAAd,OADK,EAEL;AAACN,QAAAA,EAAE,EAAE,CAAL;AAAQM,QAAAA,IAAI,EAAE;AAAd,OAFK;AADJ;AAlBL,GALA;AA+BRI,EAAAA,QAAQ,EAAE,MAAI;AACT,WAAOjB,KAAK,CAACkB,KAAb;AACJ,GAjCO;AAmCRC,EAAAA,OAAO,EAAGC,WAAD,IAAiB;AACtB,QAAIC,OAAO,GAAG;AACVd,MAAAA,EAAE,EAAE,CADM;AAEVC,MAAAA,OAAO,EAAE,KAAKS,QAAL,GAAgBZ,WAAhB,CAA4BK,WAF3B;AAGVD,MAAAA,UAAU,EAAE;AAHF,KAAd;AAKA,SAAKQ,QAAL,GAAgBZ,WAAhB,CAA4BC,KAA5B,CAAkCgB,IAAlC,CAAuCD,OAAvC;AACA,SAAKJ,QAAL,GAAgBZ,WAAhB,CAA4BK,WAA5B,GAA0C,EAA1C;AACA,SAAKT,kBAAL,CAAwB,KAAKgB,QAAL,EAAxB;AACH,GA5CO;AA8CRM,EAAAA,iBAAiB,EAAGC,OAAD,IAAa;AAC5B,SAAKP,QAAL,GAAgBZ,WAAhB,CAA4BK,WAA5B,GAA0Cc,OAA1C;AACA,SAAKvB,kBAAL,CAAwB,KAAKgB,QAAL,EAAxB;AACH,GAjDO;AAmDRQ,EAAAA,SAAS,EAAGC,QAAD,IAAc;AACpB;AACD,SAAKzB,kBAAL,GAA0ByB,QAA1B,CAFqB,CAEe;AACpC;AACH;AAvDO,CAAZ;AAyDA,eAAe1B,KAAf","sourcesContent":["import React from \"react\";\r\n\r\nlet store = {\r\n\r\n     rerenderEntireTree :() =>{\r\n        console.log(\"state is changed\")\r\n    },\r\n    _state :{   \r\n        profilePage: {\r\n            posts: [\r\n                {id: 1, message: \"Hi,from Java man\", likesCount: 25},\r\n                {id: 1, message: \"Python the best_ ho-ho-ho\", likesCount: 55}\r\n            ],\r\n            newPostText: \"\"\r\n        },\r\n        messagesPage: {\r\n            dialogs: [\r\n                {id: 1, name: \"Roman\"},\r\n                {id: 2, name: \"Daniel\"},\r\n                {id: 3, name: \"Max\"}],\r\n            messages: [\r\n                {id: 1, message: \"Hi\"},\r\n                {id: 2, message: \"When will u connect Mongo Homie???)))\"},\r\n                {id: 3, message: \"AHAHAHAHhHH\"}]\r\n        },\r\n        sidebar: {\r\n            friends: [\r\n                {id: 1, name: \"Max\"},\r\n                {id: 2, name: \"Daniel\"}\r\n            ]\r\n        }\r\n    },\r\n\r\n    getState: ()=>{\r\n         return(store.state)\r\n    },\r\n\r\n    addPost :(postMessage) => {\r\n        let newPost = {\r\n            id: 5,\r\n            message: this.getState().profilePage.newPostText,\r\n            likesCount: 100\r\n        };\r\n        this.getState().profilePage.posts.push(newPost);\r\n        this.getState().profilePage.newPostText = \"\";\r\n        this.rerenderEntireTree(this.getState());\r\n    },\r\n\r\n    updateNewPostText :(newText) => {\r\n        this.getState().profilePage.newPostText = newText;\r\n        this.rerenderEntireTree(this.getState());\r\n    },\r\n\r\n    subscribe :(observer) => {\r\n         debugger;\r\n        this.rerenderEntireTree = observer; // observer - наблюдатель (pattern)\r\n        //examples: addEventListener, onClick\r\n    }\r\n}\r\nexport default store;"]},"metadata":{},"sourceType":"module"}